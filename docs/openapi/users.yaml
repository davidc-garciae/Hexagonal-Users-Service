openapi: 3.0.3
info:
  title: users-service API
  version: 1.0.0
  description: API de gesti칩n de usuarios y autenticaci칩n
servers:
  - url: http://localhost:8081
    description: Local
security:
  - bearerAuth: []
paths:
  /api/v1/auth/login:
    post:
      tags: [Auth]
      summary: Iniciar sesi칩n y obtener JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/v1/users/owner:
    post:
      tags: [Users]
      summary: Crear usuario propietario (solo ADMIN)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /api/v1/users/employee:
    post:
      tags: [Users]
      summary: Crear usuario empleado (solo OWNER)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmployeeRequest'
      responses:
        '201':
          description: Creado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /api/v1/users/customer:
    post:
      tags: [Users]
      summary: Create customer account (public)
      description: Self-registration endpoint for customers. No authentication required.
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /api/v1/usuarios/{id}:
    get:
      tags: [Usuarios]
      summary: Obtener usuario por id
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsuarioResponse'
        '404': { description: No encontrado }
  /api/v1/usuarios/{id}/activo:
    get:
      tags: [Validaciones]
      summary: Validar si el usuario est치 activo
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: boolean
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRequest:
      type: object
      required: [firstName, lastName, document, phone, birthDate, email, password]
      properties:
        firstName: { type: string }
        lastName: { type: string }
        document: { type: string }
        phone: { type: string, maxLength: 13 }
        birthDate: { type: string, format: date }
        email: { type: string, format: email }
        password: { type: string, format: password }
    UserEmployeeRequest:
      allOf:
        - $ref: '#/components/schemas/UserRequest'
      properties:
        restaurantId:
          type: integer
          format: int64
    UserResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        firstName: { type: string }
        lastName: { type: string }
        email: { type: string }
        role: { type: string, enum: [ADMIN, OWNER, EMPLOYEE, CUSTOMER] }
        active: { type: boolean }
    LoginRequest:
      type: object
      required: [email, password]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    AuthResponse:
      type: object
      properties:
        token: { type: string }
        userId: { type: integer, format: int64 }
        role: { type: string }
        expiresIn: { type: integer }
    UsuarioResponse:
      type: object
      properties:
        id: { type: integer, format: int64 }
        nombre: { type: string }
        apellido: { type: string }
        correo: { type: string }
        rol: { type: string, enum: [ADMINISTRADOR, PROPIETARIO, EMPLEADO, CLIENTE] }
        activo: { type: boolean }
