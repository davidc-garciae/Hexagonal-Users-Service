import org.openapitools.generator.gradle.plugin.tasks.ValidateTask

plugins {
	id 'org.springframework.boot' version '3.4.7'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'java'
	id 'jacoco'
	id 'com.diffplug.spotless' version '6.25.0'
	id 'org.openapi.generator' version '7.6.0'
	id 'com.github.ben-manes.versions' version '0.52.0'
	id 'org.owasp.dependencycheck' version '12.1.3'
}

group = 'com.pragma.powerup'
version = '0.0.1-SNAPSHOT'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	mapstructVersion = "1.6.3"
	lombokVersion = "1.18.38"
	lombokMapstructBindingVersion = "0.2.0"
	postgresqlVersion = '42.7.7'
	openApiVersion = "2.8.11"
    logstashEncoderVersion = '7.4'
    micrometerTracingVersion = '1.4.2'
}

dependencies {
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    // ... otras dependencias
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation 'io.github.cdimascio:dotenv-java:3.0.0'
	// Base de datos en memoria para pruebas
	testImplementation 'com.h2database:h2'
	runtimeOnly "org.postgresql:postgresql:${postgresqlVersion}"

	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
	compileOnly "org.projectlombok:lombok:${lombokVersion}"

	// Orden correcto de annotation processors
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBindingVersion}"
	annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"

	// Solo incluir la UI que necesites
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"

	// Logging JSON + Tracing (Micrometer + OTLP)
	implementation "net.logstash.logback:logstash-logback-encoder:${logstashEncoderVersion}"
	implementation "io.micrometer:micrometer-tracing-bridge-otel:${micrometerTracingVersion}"
	implementation "io.opentelemetry:opentelemetry-exporter-otlp:1.41.0"

	// Spring Security (for header-based auth template)
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// Testing & Architecture
	testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
	// Security test helpers (csrf(), @WithMockUser, etc.)
	testImplementation 'org.springframework.security:spring-security-test'

	// Security constraints (pin versions to mitigate CVEs)
	constraints {
		implementation('ch.qos.logback:logback-core:1.5.13') { because 'Pin CVE-fixed version' }
		implementation('ch.qos.logback:logback-classic:1.5.13') { because 'Pin CVE-fixed version' }
		implementation('org.apache.commons:commons-lang3:3.14.0') { because 'Avoid vulnerable transitive versions' }
		implementation('net.minidev:json-smart:2.5.1') { because 'Avoid vulnerable transitive versions' }
		implementation('org.xmlunit:xmlunit-core:2.9.1') { because 'Avoid vulnerable transitive versions' }
	}
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
		html.required = true
	}
}

tasks.register('jacocoCoverageVerification', JacocoCoverageVerification) {
	dependsOn test
	violationRules {
		rule {
			limit {
				minimum = 0.80
			}
		}
	}
}

check.dependsOn jacocoCoverageVerification

spotless {
	java {
		googleJavaFormat('1.22.0')
		target 'src/**/*.java'
	}
	format 'misc', {
		target '.editorconfig','*.md','docs/**/*.md','docs/**/*.mmd','**/*.yml'
		trimTrailingWhitespace()
		endWithNewline()
	}
}

// ---- OpenAPI: tareas de validación de contratos ----

def oasDir = "$rootDir/docs/openapi"

tasks.register('openApiValidateUsuarios', ValidateTask) {
	inputSpec.set("${oasDir}/usuarios.yaml")
}

tasks.register('openApiValidatePlazoleta', ValidateTask) {
	inputSpec.set("${oasDir}/plazoleta.yaml")
}

tasks.register('openApiValidateOrders', ValidateTask) {
	inputSpec.set("${oasDir}/orders.yaml")
}

tasks.register('openApiValidateTraceability', ValidateTask) {
	inputSpec.set("${oasDir}/traceability.yaml")
}

tasks.register('openApiValidateMensajeria', ValidateTask) {
	inputSpec.set("${oasDir}/mensajeria.yaml")
}

tasks.register('openApiValidateAll') {
	group = 'verification'
	description = 'Valida todos los contratos OpenAPI en docs/openapi'
	dependsOn 'openApiValidateUsuarios', 'openApiValidatePlazoleta', 'openApiValidateOrders', 'openApiValidateTraceability', 'openApiValidateMensajeria'
}

// ---- Auditoría de dependencias (OWASP) ----
dependencyCheck {
	failBuildOnCVSS = 8.0
	formats = ['HTML','JSON']
	suppressionFile = file('dependency-check-suppressions.xml')
}
